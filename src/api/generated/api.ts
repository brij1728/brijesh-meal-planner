/* tslint:disable */

/* eslint-disable */

/**
 * MealPlanner API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequiredError } from './base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from './common';
import type { Configuration } from './configuration';

/**
 *
 * @export
 * @interface CategoryGet
 */
export interface CategoryGet {
  /**
   *
   * @type {string}
   * @memberof CategoryGet
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof CategoryGet
   */
  name: string;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {Array<ValidationError>}
   * @memberof HTTPValidationError
   */
  detail?: Array<ValidationError>;
}
/**
 *
 * @export
 * @interface IngredientGet
 */
export interface IngredientGet {
  /**
   *
   * @type {string}
   * @memberof IngredientGet
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof IngredientGet
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof IngredientGet
   */
  quantity: string;
}
/**
 *
 * @export
 * @interface LocationInner
 */
export interface LocationInner {}
/**
 *
 * @export
 * @interface RecipeGet
 */
export interface RecipeGet {
  /**
   *
   * @type {string}
   * @memberof RecipeGet
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof RecipeGet
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof RecipeGet
   */
  description?: string;
  /**
   *
   * @type {number}
   * @memberof RecipeGet
   */
  cooking_time_in_minutes: number;
  /**
   *
   * @type {string}
   * @memberof RecipeGet
   */
  complexity: string;
  /**
   *
   * @type {number}
   * @memberof RecipeGet
   */
  calories_estimate: number;
  /**
   *
   * @type {CategoryGet}
   * @memberof RecipeGet
   */
  category: CategoryGet;
  /**
   *
   * @type {Array<IngredientGet>}
   * @memberof RecipeGet
   */
  ingredients: Array<IngredientGet>;
  /**
   *
   * @type {Array<RecipeInstructionGet>}
   * @memberof RecipeGet
   */
  instructions: Array<RecipeInstructionGet>;
  /**
   *
   * @type {Array<RecipeImageGet>}
   * @memberof RecipeGet
   */
  images: Array<RecipeImageGet>;
}
/**
 *
 * @export
 * @interface RecipeImageGet
 */
export interface RecipeImageGet {
  /**
   *
   * @type {string}
   * @memberof RecipeImageGet
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof RecipeImageGet
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof RecipeImageGet
   */
  caption?: string;
}
/**
 *
 * @export
 * @interface RecipeInstructionGet
 */
export interface RecipeInstructionGet {
  /**
   *
   * @type {string}
   * @memberof RecipeInstructionGet
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof RecipeInstructionGet
   */
  text: string;
}
/**
 *
 * @export
 * @interface UserGet
 */
export interface UserGet {
  /**
   *
   * @type {string}
   * @memberof UserGet
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof UserGet
   */
  first_name?: string;
  /**
   *
   * @type {string}
   * @memberof UserGet
   */
  last_name?: string;
  /**
   *
   * @type {string}
   * @memberof UserGet
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserGet
   */
  image_url?: string;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {Array<LocationInner>}
   * @memberof ValidationError
   */
  loc: Array<LocationInner>;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  msg: string;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  type: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get User Info Api
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGetUserInfoApi: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get User Info Api
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authGetUserInfoApi(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGet>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authGetUserInfoApi(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthApiFp(configuration);
  return {
    /**
     *
     * @summary Get User Info Api
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGetUserInfoApi(options?: any): AxiosPromise<UserGet> {
      return localVarFp
        .authGetUserInfoApi(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @summary Get User Info Api
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authGetUserInfoApi(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .authGetUserInfoApi(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RecipesApi - axios parameter creator
 * @export
 */
export const RecipesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recipesGetCategories: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/categories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Category
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recipesGetCategory: async (
      categoryId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'categoryId' is not null or undefined
      assertParamExists('recipesGetCategory', 'categoryId', categoryId);
      const localVarPath = `/api/categories/{category_id}`.replace(
        `{${'category_id'}}`,
        encodeURIComponent(String(categoryId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Category Recipes
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recipesGetCategoryRecipes: async (
      categoryId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'categoryId' is not null or undefined
      assertParamExists('recipesGetCategoryRecipes', 'categoryId', categoryId);
      const localVarPath = `/api/categories/{category_id}/recipes`.replace(
        `{${'category_id'}}`,
        encodeURIComponent(String(categoryId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Recipe
     * @param {string} recipeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recipesGetRecipe: async (
      recipeId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'recipeId' is not null or undefined
      assertParamExists('recipesGetRecipe', 'recipeId', recipeId);
      const localVarPath = `/api/recipes/{recipe_id}`.replace(
        `{${'recipe_id'}}`,
        encodeURIComponent(String(recipeId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Recipes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recipesGetRecipes: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/recipes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RecipesApi - functional programming interface
 * @export
 */
export const RecipesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RecipesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async recipesGetCategories(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<CategoryGet>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.recipesGetCategories(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get Category
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async recipesGetCategory(
      categoryId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryGet>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.recipesGetCategory(categoryId, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get Category Recipes
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async recipesGetCategoryRecipes(
      categoryId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<RecipeGet>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.recipesGetCategoryRecipes(
          categoryId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get Recipe
     * @param {string} recipeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async recipesGetRecipe(
      recipeId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipeGet>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.recipesGetRecipe(recipeId, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get Recipes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async recipesGetRecipes(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<RecipeGet>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.recipesGetRecipes(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * RecipesApi - factory interface
 * @export
 */
export const RecipesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = RecipesApiFp(configuration);
  return {
    /**
     *
     * @summary Get Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recipesGetCategories(options?: any): AxiosPromise<Array<CategoryGet>> {
      return localVarFp
        .recipesGetCategories(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Category
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recipesGetCategory(
      categoryId: string,
      options?: any,
    ): AxiosPromise<CategoryGet> {
      return localVarFp
        .recipesGetCategory(categoryId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Category Recipes
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recipesGetCategoryRecipes(
      categoryId: string,
      options?: any,
    ): AxiosPromise<Array<RecipeGet>> {
      return localVarFp
        .recipesGetCategoryRecipes(categoryId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Recipe
     * @param {string} recipeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recipesGetRecipe(recipeId: string, options?: any): AxiosPromise<RecipeGet> {
      return localVarFp
        .recipesGetRecipe(recipeId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Recipes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recipesGetRecipes(options?: any): AxiosPromise<Array<RecipeGet>> {
      return localVarFp
        .recipesGetRecipes(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RecipesApi - object-oriented interface
 * @export
 * @class RecipesApi
 * @extends {BaseAPI}
 */
export class RecipesApi extends BaseAPI {
  /**
   *
   * @summary Get Categories
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RecipesApi
   */
  public recipesGetCategories(options?: AxiosRequestConfig) {
    return RecipesApiFp(this.configuration)
      .recipesGetCategories(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Category
   * @param {string} categoryId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RecipesApi
   */
  public recipesGetCategory(categoryId: string, options?: AxiosRequestConfig) {
    return RecipesApiFp(this.configuration)
      .recipesGetCategory(categoryId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Category Recipes
   * @param {string} categoryId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RecipesApi
   */
  public recipesGetCategoryRecipes(
    categoryId: string,
    options?: AxiosRequestConfig,
  ) {
    return RecipesApiFp(this.configuration)
      .recipesGetCategoryRecipes(categoryId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Recipe
   * @param {string} recipeId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RecipesApi
   */
  public recipesGetRecipe(recipeId: string, options?: AxiosRequestConfig) {
    return RecipesApiFp(this.configuration)
      .recipesGetRecipe(recipeId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Recipes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RecipesApi
   */
  public recipesGetRecipes(options?: AxiosRequestConfig) {
    return RecipesApiFp(this.configuration)
      .recipesGetRecipes(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
